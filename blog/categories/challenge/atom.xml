<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Challenge, | Manuel Neuhauser]]></title>
  <link href="http://manu3569.github.io/blog/categories/challenge/atom.xml" rel="self"/>
  <link href="http://manu3569.github.io/"/>
  <updated>2013-12-09T09:10:38-05:00</updated>
  <id>http://manu3569.github.io/</id>
  <author>
    <name><![CDATA[Manuel Neuhauser]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Challenge Accepted: Local File Inclusion]]></title>
    <link href="http://manu3569.github.io/blog/2013/12/09/challenge-accepted-local-file-inclusion/"/>
    <updated>2013-12-09T08:18:00-05:00</updated>
    <id>http://manu3569.github.io/blog/2013/12/09/challenge-accepted-local-file-inclusion</id>
    <content type="html"><![CDATA[<p>This morning I woke up to some unfriendly ice rain, and the snow covered sidewalk has turned into an ice-skating rink.  Baby steps were necessary to avoid ending up in a horizontal position unvolunerily.  I made it to the train station safely, and got on the NYC-bound train.
On the bright side, Egor Homakov (@homakov) posted a challenge on Twitter for finding the local file inclusion security hole in a piece of path validation code.</p>

<p>```ruby
input = &lsquo;sub/dir/ectory&rsquo;
input = input.strip</p>

<p>raise &lsquo;NO WAI&rsquo; if input[0] == &lsquo;/&rsquo;</p>

<p>if input.split(&lsquo;/&rsquo;).any?{|folder| !(folder =~ /\A[a-zA-Z*.]+\z/) or folder == &lsquo;..&rsquo; }
puts &lsquo;Error&rsquo;
else
puts <code>cat #{input}</code>
end
```</p>

<p>Looks like my 40 minute train ride has turned into a hacking session and I eagerly played around with the provided code to access the contents of my local <code>etc/passwd</code> file. Eureka! Finally, I figured out that by breaking up <code>..</code> (parent directory) with the wildcard <code>*</code>, I could trick the validation code into allowing my path string. Also, in <code>bash</code> the folder <code>.*.</code> behaves the same as <code>..</code>, so by prepending <code>etc/passwd</code> with the right number of <code>.*./</code> strings, I could finally access the coveted password file.</p>

<p>``` ruby</p>

<h1>Note: This path gives me the passwd file contents on my local system</h1>

<p>input = &lsquo;.<em>./.</em>./.<em>./.</em>./.*./etc/passwd&rsquo;</p>

<p>input = input.strip</p>

<p>raise &lsquo;NO WAI&rsquo; if input[0] == &lsquo;/&rsquo;</p>

<p>if input.split(&lsquo;/&rsquo;).any?{|folder| !(folder =~ /\A[a-zA-Z*.]+\z/) or folder == &lsquo;..&rsquo; }
puts &lsquo;Error&rsquo;
else
puts <code>cat #{input}</code>
end
```</p>
]]></content>
  </entry>
  
</feed>
