<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Lucid Coding]]></title>
  <link href="http://manu3569.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://manu3569.github.io/"/>
  <updated>2013-10-10T10:44:44-04:00</updated>
  <id>http://manu3569.github.io/</id>
  <author>
    <name><![CDATA[Manuel Neuhauser]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What the Splat?]]></title>
    <link href="http://manu3569.github.io/blog/2013/10/08/what-the-splat/"/>
    <updated>2013-10-08T22:12:00-04:00</updated>
    <id>http://manu3569.github.io/blog/2013/10/08/what-the-splat</id>
    <content type="html"><![CDATA[<p>The asterisk operator commonly known as splat can be a powerful ally in writing clean and highly functional code.  The splat operator has a variety of behaviors depending on where it is used, and in this post I&rsquo;ll focus on the use of splat in conjunction with methods in Ruby 1.9 and later.</p>

<br/>


<h3>Arbitrary Argument Length in Method Signature</h3>

<p>Occasionally, we would like to define a method that will accept an undefined number of argument.  Typically, we use an optional <code>Hash</code> as the last argument, which holds a variety of arguments.  However, we can also take advantage of the splat operator by placing it in front of an argument variable name in the method definition.  It will cause the argument variable to capture an <code>Array</code> of all arguments passed to the function that have not been matched to other arguments in the method signature.  The splat operator can be used at the beginning or at the end of the argument list, though for the latter, the last argument that is passed into the function must be a <code>Hash</code>.</p>

<p>``` ruby
def add_to(playlist, *songs)
  songs.each do |song|</p>

<pre><code>playlist &lt;&lt; song
</code></pre>

<p>  end
end</p>

<p>rock = []
add_to(rock, &ldquo;Beatles &ndash; Yellow Submarine&rdquo;, &ldquo;Counting Crows &ndash; Big Yellow Taxi&rdquo;, &ldquo;Coldplay &ndash; Yellow&rdquo;)</p>

<p>rock.inspect
 #=> &ldquo;["Beatles &ndash; Yellow Submarine&rdquo;, &ldquo;Counting Crows &ndash; Big Yellow Taxi&rdquo;, &ldquo;Coldplay &ndash; Yellow&rdquo;]&ldquo;
```</p>

<p>``` ruby
def display_songs(*songs, formatting)
  songs.each do |song|</p>

<pre><code>puts "#{formatting[:start]} #{song} #{formatting[:end]}"
</code></pre>

<p>  end
end</p>

<p>display_songs(&ldquo;Stairway to Heaven&rdquo;, &ldquo;Hotel California&rdquo;, &ldquo;Hold the Line&rdquo;, {:start => &ldquo;>>>&rdquo;, :end => &ldquo;&lt;&lt;&lt;&rdquo;})
 # >>> Stairway to Heaven &lt;&lt;&lt;
 # >>> Hotel California &lt;&lt;&lt;
 # >>> Hold the Line &lt;&lt;&lt;
```</p>

<p>There is one more &mdash;for the lack of a better word&mdash; <em>interesting</em> use of the splat operator in the method signature at the end when it&rsquo;s by itself.  It allows for additional arguments to be accepted, but ignored by the method.</p>

<p>``` ruby
def my_favorite_food(first,second,*)
  puts &ldquo;My favorite food items are #{first} and #{second}.&rdquo;
end</p>

<p>my_favorite_food(&ldquo;pizza&rdquo;,&ldquo;sushi&rdquo;,&ldquo;salad&rdquo;)
 #=> My favorite food items are pizza and sushi.
```</p>

<br/>


<br/>


<h3>Calling Methods</h3>

<p>The reason for this blog entry is actually this section.  I recently worked on a project in which I wanted to use <code>Object#send</code> to dynamically call an instance method. The method <code>#play</code> takes an argument, while <code>#list</code> doesn&rsquo;t. I quickly ran into a problem with this particular code:</p>

<p>``` ruby
def play(song)
  # code to play given song
end</p>

<p>def list
  # code to display all songs
end</p>

<p>def process(input)
  command, args = input.split(&ldquo; &rdquo;, 2)
  puts args.inspect
  self.send(command, args)
end</p>

<p>process(&ldquo;play Michael Jackson &ndash; Beat It&rdquo;)
 #=> nil</p>

<p>process(&ldquo;list&rdquo;)
 #ArgumentError: wrong number of arguments (1 for 0)
 # from (irb):32:in <code>list'
 # from (irb):38:in</code>process'
<code>``
When processing the input "list",</code>args<code>is set to</code>nil<code>, which is still considered an argument and it triggers an</code>ArgumentError<code>because</code>#list` does not take any arguments.</p>

<p>Our little friend splat can actually help us resolve this issue.  When calling a method and prepending the splat to an array variable, it will cause it to be distributed across the arguments of the method.  In my case, the empty <code>args</code> variable was distributed across exactly no arguments.  By adding the splat, we can now dynamically send either one or two arguments to the <code>#send</code> function.</p>

<p>```ruby
def process(input)
  command, args = input.split(&ldquo; &rdquo;, 2)
  puts args.class
  self.send(command, *args)
end</p>

<p>process(&ldquo;play Michael Jackson &ndash; Beat It&rdquo;)
 #=> nil</p>

<p>process(&ldquo;list&rdquo;)
 #=> nil
```</p>

<p>When using splat to distribute the values to the arguments, the count must match exactly.  Also, only a splat in front of an empty <code>Array</code>, <code>Hash</code> or <code>nil</code> will yield no value to argument assignment.</p>

<p>``` ruby</p>

<p>def zero
  puts &ldquo;Nothing&rdquo;
end</p>

<p>def one(a)
  puts &ldquo;#{a}&rdquo;
end</p>

<p>def two(a,b)
  puts &ldquo;#{a}, #{b}&rdquo;
end</p>

<p>def three(a,b,c)
  puts &ldquo;#{a}, #{b}, #{c}&rdquo;
end</p>

<p>values = [1, 2]</p>

<p>zero(<em>values)  # Error
one(</em>values)   # Error
two(<em>values)   # Success
three(</em>values) # Error</p>

<p>zero(<em>[])      # Success
zero(</em>{})      # Success
zero(*nil)     # Success
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enumerable's Best Kept Secrets]]></title>
    <link href="http://manu3569.github.io/blog/2013/10/07/enumerables-best-kept-secrets/"/>
    <updated>2013-10-07T18:41:00-04:00</updated>
    <id>http://manu3569.github.io/blog/2013/10/07/enumerables-best-kept-secrets</id>
    <content type="html"><![CDATA[<blockquote><p>An <code>Enumerator</code> is defined as a &ldquo;class which allows both internal and external iteration.&rdquo; It represent a series of objects, it can be lazily generated and it can be infinite. In contrast, the an <code>Enumerable</code> is a module and it &ldquo;provides collection classes with several traversal and searching methods, and with the ability to sort.&rdquo;</p></blockquote>

<br/>


<p>In Ruby, enumerators are used quite frequently for their extensive abstraction of iteration functionality. When we call the <code>Array#each</code> method, we can focus on dealing with the individual <code>Array</code> items rather than having to worry about how to retrieve each item one by one. When we need to find a subset of items from a <code>Hash</code>, we can use <code>#select</code> with a code block to decide which item we want in the result, without necessarily knowing how the <code>Hash</code> is traversed.</p>

<br/>


<p>All this power comes from the <code>Enumerable</code> module, and it is inlucded by many of the common Object types such as <code>Array</code>, <code>Hash</code>, <code>Range</code>, and <code>Set</code>. When first learning Ruby, <code>#each</code> and <code>#collect</code> quickly become an often-used tool we use for iterating over data. Most functionality can be accomplished by their use, however, there are many more advanced iterators available with very specific funtionality, but unless we constantly skim over the Ruby documentation, we may not know about them. I&rsquo;d like to introduce (or re-introduce for some of you) some of my favorites.</p>

<br/>


<h2>#count</h2>

<p>Alright, alright. You may use <code>#count</code> on a daily basis, but did you know that you can specify a parameter to the method call? It will return the number of occurrances of that particular value.</p>

<p>``` ruby
fruit = %w(apple orange banana apple kiwi grapes apple)</p>

<p>fruit.count(&ldquo;apple&rdquo;) #=> 3
```</p>

<p>If you though that was cool, then hold on to your pants. When you add a block that evaluates a condition for each item in the collection, you can add logic regarding which items you want to count. If the block return <code>true</code> the item gets counted.</p>

<p><code>ruby
fruit = %w(apple orange banana apple kiwi grapes apple)
fruit.count { |item| %w(banana kiwi).include? item } #=&gt; 2
</code></p>

<br/>


<h2>#lazy</h2>

<p>We all like to be lazy sometimes. Starting in Ruby 2.0, we can now let <code>Enumerable</code> objects be lazy too. All this means is that the result of the enumerable function will not get evaluated until you tell it to.</p>

<p>``` ruby
car_names = %w(audi chevrolet dodge)</p>

<p>capitalized_car_names = car_names.lazy.map &amp;:capitalize
 => #&lt;Enumerator::Lazy: #&lt;Enumerator::Lazy: [&ldquo;audi&rdquo;, &ldquo;chevrolet&rdquo;, &ldquo;dodge&rdquo;]>:map></p>

<p>capitalized_car_names.to_a
 => [&ldquo;Audi&rdquo;, &ldquo;Chevrolet&rdquo;, &ldquo;Dodge&rdquo;]
```</p>

<p>The behavior in this example doesn&rsquo;t really show the full potential of <code>#lazy</code>. Imagine that you have an operation that you want to apply to a collection, however, the contents of the given collection are dynamically changing. Using <code>#lazy</code> keeps the enumerator updated with the latest state of the collection.</p>

<p>``` ruby</p>

<p>car_names &lt;&lt; &lsquo;volkswagen&rsquo;</p>

<p>capitalized_car_names
 => #&lt;Enumerator::Lazy: #&lt;Enumerator::Lazy: [&ldquo;audi&rdquo;, &ldquo;chevrolet&rdquo;, &ldquo;dodge&rdquo;, &ldquo;volkswagen&rdquo;]>:map></p>

<p>capitalized_car_names.to_a
 => [&ldquo;Audi&rdquo;, &ldquo;Chevrolet&rdquo;, &ldquo;Dodge&rdquo;, &ldquo;Volkswagen&rdquo;]</p>

<p>car_names.shift
 => &ldquo;audi&rdquo;</p>

<p>capitalized_car_names.to_a
 => [&ldquo;Chevrolet&rdquo;, &ldquo;Dodge&rdquo;, &ldquo;Volkswagen&rdquo;]
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nag A Ram]]></title>
    <link href="http://manu3569.github.io/blog/2013/10/07/nag-a-ram/"/>
    <updated>2013-10-07T12:05:00-04:00</updated>
    <id>http://manu3569.github.io/blog/2013/10/07/nag-a-ram</id>
    <content type="html"><![CDATA[<blockquote><p>An anagram is a type of word play, the result of rearranging the letters of a word or phrase to produce a new word or phrase, using all the original letters exactly once; for example orchestra can be rearranged into carthorse. Someone who creates anagrams may be called an &ldquo;anagrammatist&rdquo;. <em>Source: <a href="http://en.wikipedia.org/wiki/Anagram">Wikipedia</a></em></p></blockquote>

<br/>


<p>The core of a recent code challange included finding out whether one string is an anagram of another. Now this task can be accomplished with a couple of iterators and character comparison, but such an answer would yield code that is too complex looking for what I needs to accomplish and it may be difficult to read.</p>

<p>Rather than picking each letter from the first string and finding it in the second, I wanted to compare the two strings in a single step. First, the strings both need to be sorted and in order to do this, they first had to be converted to an array of single letters. With a little <code>String#split</code> and <code>Array#sort</code> magic the resulting arrays can easily be compared.</p>

<br/>


<p>``` ruby
class Anagram</p>

<p>  def initialize(word)</p>

<pre><code>@word = word
@word_match_string = generate_match_string(word)
</code></pre>

<p>  end</p>

<p>  def match(words)</p>

<pre><code>words.select do |potential_anagram|
  @word_match_string == generate_match_string(potential_anagram)
end
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def generate_match_string(word)</p>

<pre><code>word.downcase.split("").sort
</code></pre>

<p>  end</p>

<p>end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://manu3569.github.io/blog/2013/09/24/hello-world/"/>
    <updated>2013-09-24T16:56:00-04:00</updated>
    <id>http://manu3569.github.io/blog/2013/09/24/hello-world</id>
    <content type="html"><![CDATA[<p>This is my first post!</p>
]]></content>
  </entry>
  
</feed>
