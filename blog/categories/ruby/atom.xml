<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Lucid Coding]]></title>
  <link href="http://manu3569.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://manu3569.github.io/"/>
  <updated>2013-10-08T09:38:00-04:00</updated>
  <id>http://manu3569.github.io/</id>
  <author>
    <name><![CDATA[Manuel Neuhauser]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Enumerable's Best Kept Secrets]]></title>
    <link href="http://manu3569.github.io/blog/2013/10/07/enumerables-best-kept-secrets/"/>
    <updated>2013-10-07T18:41:00-04:00</updated>
    <id>http://manu3569.github.io/blog/2013/10/07/enumerables-best-kept-secrets</id>
    <content type="html"><![CDATA[<blockquote><p>An <code>Enumerator</code> is defined as a &ldquo;class which allows both internal and external iteration.&rdquo; It represent a series of objects, it can be lazily generated and it can be infinite. In contrast, the an <code>Enumerable</code> is a module and it &ldquo;provides collection classes with several traversal and searching methods, and with the ability to sort.&rdquo;</p></blockquote>

<br/>


<p>In Ruby, enumerators are used quite frequently for their extensive abstraction of iteration functionality. When we call the <code>Array#each</code> method, we can focus on dealing with the individual <code>Array</code> items rather than having to worry about how to retrieve each item one by one. When we need to find a subset of items from a <code>Hash</code>, we can use <code>#select</code> with a code block to decide which item we want in the result, without necessarily knowing how the <code>Hash</code> is traversed.</p>

<br/>


<p>All this power comes from the <code>Enumerable</code> module, and it is inlucded by many of the common Object types such as <code>Array</code>, <code>Hash</code>, <code>Range</code>, and <code>Set</code>. When first learning Ruby, <code>#each</code> and <code>#collect</code> quickly become an often-used tool we use for iterating over data. Most functionality can be accomplished by their use, however, there are many more advanced iterators available with very specific funtionality, but unless we constantly skim over the Ruby documentation, we may not know about them. I&rsquo;d like to introduce (or re-introduce for some of you) some of my favorites.</p>

<br/>


<h2>#count</h2>

<p>Alright, alright. You may use <code>#count</code> on a daily basis, but did you know that you can specify a parameter to the method call? It will return the number of occurrances of that particular value.</p>

<p>``` ruby
fruit = %w(apple orange banana apple kiwi grapes apple)</p>

<p>fruit.count(&ldquo;apple&rdquo;) #=> 3
```</p>

<p>If you though that was cool, then hold on to your pants. When you add a block that evaluates a condition for each item in the collection, you can add logic regarding which items you want to count. If the block return <code>true</code> the item gets counted.</p>

<p><code>ruby
fruit = %w(apple orange banana apple kiwi grapes apple)
fruit.count { |item| %w(banana kiwi).include? item } #=&gt; 2
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nag A Ram]]></title>
    <link href="http://manu3569.github.io/blog/2013/10/07/nag-a-ram/"/>
    <updated>2013-10-07T12:05:00-04:00</updated>
    <id>http://manu3569.github.io/blog/2013/10/07/nag-a-ram</id>
    <content type="html"><![CDATA[<blockquote><p>An anagram is a type of word play, the result of rearranging the letters of a word or phrase to produce a new word or phrase, using all the original letters exactly once; for example orchestra can be rearranged into carthorse. Someone who creates anagrams may be called an &ldquo;anagrammatist&rdquo;. <em>Source: <a href="http://en.wikipedia.org/wiki/Anagram">Wikipedia</a></em></p></blockquote>

<br/>


<p>The core of a recent code challange included finding out whether one string is an anagram of another. Now this task can be accomplished with a couple of iterators and character comparison, but such an answer would yield code that is too complex looking for what I needs to accomplish and it may be difficult to read.</p>

<p>Rather than picking each letter from the first string and finding it in the second, I wanted to compare the two strings in a single step. First, the strings both need to be sorted and in order to do this, they first had to be converted to an array of single letters. With a little <code>String#split</code> and <code>Array#sort</code> magic the resulting arrays can easily be compared.</p>

<br/>


<p>``` ruby
class Anagram</p>

<p>  def initialize(word)</p>

<pre><code>@word = word
@word_match_string = generate_match_string(word)
</code></pre>

<p>  end</p>

<p>  def match(words)</p>

<pre><code>words.select do |potential_anagram|
  @word_match_string == generate_match_string(potential_anagram)
end
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def generate_match_string(word)</p>

<pre><code>word.downcase.split("").sort
</code></pre>

<p>  end</p>

<p>end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://manu3569.github.io/blog/2013/09/24/hello-world/"/>
    <updated>2013-09-24T16:56:00-04:00</updated>
    <id>http://manu3569.github.io/blog/2013/09/24/hello-world</id>
    <content type="html"><![CDATA[<p>This is my first post!</p>
]]></content>
  </entry>
  
</feed>
