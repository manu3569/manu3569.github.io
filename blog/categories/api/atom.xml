<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: API | Manuel Neuhauser]]></title>
  <link href="http://manu3569.github.io/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://manu3569.github.io/"/>
  <updated>2013-12-12T17:40:00-05:00</updated>
  <id>http://manu3569.github.io/</id>
  <author>
    <name><![CDATA[Manuel Neuhauser]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Design Pattern for Structuring Rails Apps]]></title>
    <link href="http://manu3569.github.io/blog/2013/12/13/design-pattern-for-structuring-rails-apps/"/>
    <updated>2013-12-13T03:03:00-05:00</updated>
    <id>http://manu3569.github.io/blog/2013/12/13/design-pattern-for-structuring-rails-apps</id>
    <content type="html"><![CDATA[<p>I recently worked on the web application <a href="http://wishgr.am">Wishgram</a> and its development quickly got more complex when the need for an API arose to support an iOS app.</p>

<p>I&rsquo;m not a proponent for building controllers that handle both web browser requests and API calls, because it yields a less skinny controller with more complex code when web application and API specific code are mixed.</p>

<p>For example, responses to success and failure actions in web application requests are generally handled with <code>render</code> or <code>redirect_to</code>, while API requests encapsulate the action outcome in a <code>JSON</code> or <code>XML</code> response. In a RESTful controller with 6 actions, we are quickly losing the beach body of a skinny controller.</p>

<p>Usually, the login mechanisms for web application and API users differ, where the former typically uses a username or email with a password and the latter tends to use a certificate or an OAuth implementation for granting authentication. This was the case in my project, and handling two authentication methods in the controller added unnecessary complexity.</p>

<p>Furthermore, the flat structure of controllers &mdash; as produced by the Rails generators &mdash; became too cumbersome to organize with two or more separate areas of application functionality.</p>

<p>My solution and proposed Rails design pattern is to always group common controllers into modules and to have them inherit from a dedicated group parent controller. Thus, group specific code such as callbacks that would generally reside in the <code>ApplicationController</code> can now be applied in isolation to a group in its dedicated parent controller. Even if, at the time of developing a Rails app, there are only plans for a basic web application this pattern should still be used to account for future growth.</p>

<br/>


<br/>


<h2>Implementation of Controller Groups</h2>

<p>In my example, we are creating a <code>Customers</code> controller for the customer-facing web application, the company-internal back end system and the API.</p>

<br/>


<br/>


<h3>Generate Controllers</h3>

<p>```bash
$ rails generate controller FrontEnd
$ rails generate controller FrontEnd/Customers</p>

<p>$ rails generate controller BackEnd
$ rails generate controller BackEnd/Customers</p>

<p>$ rails generate controller API
$ rails generate controller API/V1/Customers
$ rails generate controller API/V2/Customers
```</p>

<br/>


<br/>


<h3>Update Controllers</h3>

<p>After generating the controllers in the groups, we change the superclass from <code>ApplicationController</code> to <code>&lt;Group&gt;Controller</code>.</p>

<br/>


<p>```ruby</p>

<h1>app/controllers/front_end/customers_controller.rb</h1>

<p>class FrontEnd::CustomersController &lt; FrontEndController</p>

<p>  def index</p>

<pre><code>render text: "Welcome to our Website"
</code></pre>

<p>  end</p>

<p>end</p>

<h1>app/controllers/back_end/customers_controller.rb</h1>

<p>class BackEnd::CustomersController &lt; BackEndController</p>

<p>  def index</p>

<pre><code>render text: "Admin Panel"
</code></pre>

<p>  end</p>

<p>end</p>

<h1>app/controllers/api/v1/customers_controller.rb</h1>

<p>class Api::V1::CustomersController &lt; ApiController</p>

<p>  def index</p>

<pre><code>render json: { customers: [] }
</code></pre>

<p>  end</p>

<p>end</p>

<h1>app/controllers/api/v2/customers_controller.rb</h1>

<p>class Api::V2::CustomersController &lt; ApiController</p>

<p>  def index</p>

<pre><code>render json: { customers: [], total_count: 0, request_time: Time.now }
</code></pre>

<p>  end
end
```</p>

<br/>


<p>Since all API controllers inherit from <code>ApiController</code>, we can easily disable CSRF for API calls to make non-GET valid requests without affecting the behavior in the front and back end controllers. This is a great example to demonstrate the advantage of separate controller groups.</p>

<br/>


<p>```ruby</p>

<h1>app/controllers/api_controller.api</h1>

<p>class ApiController &lt; ApplicationController
  protect_from_forgery with: :null_session
end
```</p>

<br/>


<br/>


<h3>Building Routes</h3>

<p>Now that we have the controllers separated, we want to separate the 3 different controller groups in individual subdomains thus reflecting a logical separation in the domain name. One bonus with this approach is that cookies won&rsquo;t be shared between our front and back end.</p>

<p>The <code>constraints</code> option is used to tie controller groups to subdomains, and the <code>scope</code> specifies the <code>Module</code> that denotes a controller group without exposing it in the route path.</p>

<br/>


<p>```ruby</p>

<h1>config/routes.rb</h1>

<p>require &lsquo;api_constraints&rsquo;</p>

<p>MyApp::Application.routes.draw do</p>

<p>  constraints subdomain: &ldquo;www&rdquo; do</p>

<pre><code>scope module: :front_end do
  resources :customers
end
</code></pre>

<p>  end</p>

<p>  constraints subdomain: &ldquo;admin&rdquo; do</p>

<pre><code>scope module: :back_end do
  resources :customers
end
</code></pre>

<p>  end</p>

<p>  constraints subdomain: &ldquo;api&rdquo; do</p>

<pre><code>scope module: :api do
  scope module: :v1, constraints: ApiConstraints.new(version: 1) do
    resources :customers, controller: "customers"
  end
  scope module: :v2, constraints: ApiConstraints.new(version: 2, default: :true) do
    resources :customers, controller: "customers"
  end
end
</code></pre>

<p>  end
```</p>

<br/>


<br/>


<h3>API Versioning</h3>

<p>At this point, we also want to future-proof the API and allow for supplemental versions. <a href="http://railscasts.com/episodes/350-rest-api-versioning">Ryan Bates' REST API Versioning Rail Cast #350</a> provides a perfect solution. We will integrate it by creating a customized constraint for the API version route <code>scope</code>.</p>

<br/>


<p>```ruby</p>

<h1>lib/api_constraints</h1>

<p>class ApiConstraints
  def initialize(options)</p>

<pre><code>@version = options[:version]
@default = options[:default]
</code></pre>

<p>  end</p>

<p>  def matches?(req)</p>

<pre><code>@default || req.headers['Accept'].include?("application/vnd.myapp.v#{@version}")
</code></pre>

<p>  end
end
```</p>

<br/>


<br/>


<h2>Final Words</h2>

<p>At this time, there is no functionality in the Rails generator to set the inheritance for a controller. I&rsquo;m currently looking into building a gem to add such a feature to facilitate the use of the proposed Rails design pattern.</p>

<p><a href="https://github.com/manu3569/mega-rails">The example application code used in this blog post is on Github</a>, so feel free to fork it, and please share your thoughts on the proposed Rails pattern.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth 2.0 - What you need to know about it for building your next app]]></title>
    <link href="http://manu3569.github.io/blog/2013/11/06/oauth-2-dot-0-what-you-need-to-know-about-it-for-building-your-next-app/"/>
    <updated>2013-11-06T22:42:00-05:00</updated>
    <id>http://manu3569.github.io/blog/2013/11/06/oauth-2-dot-0-what-you-need-to-know-about-it-for-building-your-next-app</id>
    <content type="html"><![CDATA[<p>OAuth 2.0 is an authorization framework that allows applications to gain access to an HTTP service.  It has become the <em>de facto</em> standard for users to share data from one website account with another website.  You may have already used OAuth without even realizing it.  The popular login options &ldquo;Login with Facebook&rdquo; and &ldquo;Login with Twitter&rdquo; are both utilizing the OAuth authorization process defined in RFC6749 &mdash; namely OAuth 2.0.</p>

<p>When building a web application, OAuth is making it easy for developers to tie in with other websites, though there are some terms that first need to be understood to comprehend exactly how access can be gained and granted.</p>

<p>Authentication is the process in which one user identifies herself based on some shared secret like a username and password or a token.  Authorization, on the other hand, dictates the level of access an authenticated user has to any given resource.  A token or hash (not to be confused with the <code>Hash</code> data-type) is merely a generated, hard-to-guess string of characters.</p>

<p>Token-based authorization such as OAuth has the advantage of eliminating the need for a user to share her password with a 3rd party app, allowing the user to restrict the level of access, and permitting the user to revoke access to her data.</p>

<p>In order to ensure security without compromising the ease of use, OAuth 2.0 requires that all communication is sent over an SSL connection.</p>

<p>Let&rsquo;s look at a concrete example of how we can use OAuth to gain access to a users GitHub account within our app.</p>

<br/>


<h3>1. Register the application</h3>

<p>First and foremost, we need to establish a trust relationship between our application <em>MyApp</em> and Github.  This is done through means of using a shared client ID and client secret which is generated when <a href="https://github.com/settings/applications/new">registering our app with Github</a>.  When using these credentials in API requests, Github can properly identify the authenticity of our app.</p>

<br/>


<h3>2. Authorization request &amp; grant</h3>

<p><code>
+-------+                               +------------+
|       |--(1)- Authorization Request -&gt;|   GitHub   |
| MyApp |                               | (Resource  |
|       |&lt;-(2)-- Authorization Grant ---|   Owner)   |
+-------+                               +------------+
</code></p>

<p>In order to initiate a request to gain access to certain data in the user&rsquo;s Github account, we craft a special link in our application <code>MyApp</code> which, when clicked, will forward the user to GitHub with an <em>authorization request</em>.  It looks like this:</p>

<p><code>
GET https://github.com/login/oauth/authorize/?client_id=71d3cfc29d&amp;scope=user:email&amp;redirect_uri=https://myapp.com/callback
</code></p>

<p>When looking closer at the link, we see three parameters:</p>

<ul>
<li><code>client_id</code> &ndash; This is the secret shared identifier that Github has previously provided to us when we registered our app.</li>
<li><code>scope</code> &ndash; It describes what resources our app wants access to.  The available scopes are defined by Github.</li>
<li><code>redirect_uri</code> &ndash; Tells Github where to send the <em>authorization grant</em> to.</li>
</ul>


<p>Github will use these parameters to validate the authenticity of the request and find out what resources is requested.  It presents a prompt to the logged in Github user asking whether<code>MyApp</code> should be allowed to access a certain set of resources in their account. When the user agrees to grant access, Github will send an HTTP <code>GET</code> request to the <code>redirect_uri</code> and appends a <code>code</code> parameter with contains the authorization grant.</p>

<p><code>
GET https://www.myapp.com/?code=4dabfce522efeecaac6819
</code></p>

<br/>


<h3>3. Access Token</h3>

<p><code>
+-------+                               +----------------+
|       |--(3)-- Authorization Grant --&gt;|     GitHub     |
| MyApp |                               | (Authorization |
|       |&lt;-(4)------ Access Token ------|     Server)    |
+-------+                               +----------------+
</code></p>

<p>Now that <code>MyApp</code> has the authorization grant, it can contact Github and request an access token, which is used for the actual API calls. To do that <code>MyApp</code> sends a <code>POST</code> request to Github including the client ID, client secret and the authorization grant code.</p>

<p><code>
POST https://github.com/login/oauth/access_token
 client_id=71d3cfc29d
 client_secret=c826145889facbca
 code=4dabfce522efeecaac6819
</code></p>

<p>If Github&rsquo;s authorization server receives valid credentials, it will respond with an access token.  This access token allows <code>MyApp</code> to send API requests on behalf of the user for resources belonging to the previously defined <code>scope</code>.</p>

<p><code>
{ access_token: c826145889facbcae488411a45339a19 }
</code></p>

<br/>


<h3>4. Making API calls</h3>

<p><code>
+-------+                               +-----------+
|       |--(5)----- Access Token ------&gt;|   Github  |
| MyApp |                               | (Resource |
|       |&lt;-(6)--- Protected Resource ---|   Server) |
+-------+                               +-----------+
</code></p>

<p>At this point, <code>MyApp</code> can make API calls to retrieve information from the Github user account, and it is authorized with the access token.  The access token can be put into either the header:</p>

<p><code>
Authorization: token c826145889facbcae488411a45339a19
</code></p>

<p>… or alternatively, added as a parameter to the API call URI:</p>

<p><code>
https://api.github.com/user?access_token=c826145889facbcae488411a45339a19
</code></p>

<br/>


<h3>Additional information</h3>

<p>For a detailed breakdown of OAuth 2.0, I can highly recommend to read <a href="http://tools.ietf.org/html/rfc6749">RFC6749</a>, especially section <a href="http://tools.ietf.org/html/rfc6749#section-4">4</a> and <a href="http://tools.ietf.org/html/rfc6749#section-5">5</a>.</p>
]]></content>
  </entry>
  
</feed>
