<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Routes | Manuel Neuhauser]]></title>
  <link href="http://manu3569.github.io/blog/categories/routes/atom.xml" rel="self"/>
  <link href="http://manu3569.github.io/"/>
  <updated>2013-12-12T17:21:39-05:00</updated>
  <id>http://manu3569.github.io/</id>
  <author>
    <name><![CDATA[Manuel Neuhauser]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Design Pattern for Structuring Rails Apps]]></title>
    <link href="http://manu3569.github.io/blog/2013/12/13/design-pattern-for-structuring-rails-apps/"/>
    <updated>2013-12-13T03:03:00-05:00</updated>
    <id>http://manu3569.github.io/blog/2013/12/13/design-pattern-for-structuring-rails-apps</id>
    <content type="html"><![CDATA[<p>I recently worked on the web application <a href="http://wishgr.am">Wishgram</a> and its develpment quickly got more complex when the need for an API arose to support an iOS app.</p>

<p>I&rsquo;m not a proponent for building controllers that handle both web browser requests and API calls, because it yields a less skinny controller with more complex code when web application and API specific code are mixed.</p>

<p>For example, responses to success and failure actions in web application requests are generally handled with <code>render</code> or <code>redirect_to</code>, while API requests encapsulate the action outcome in a <code>JSON</code> or <code>XML</code> response. In a RESTful controller with 6 actions, we are quickly losing the beach body of a skinny controller.</p>

<p>Usually, the login mechanisms for web application and API users differ, where the former typically uses a username or email with a password and the latter tends to use a certificate or an OAuth implementation for granting authentication. This was the case in my project, and handling two authentication methods in the controller added unnecessary complexity.</p>

<p>Furthermore, the flat stucture of controllers &mdash; as produced by the Rails generators &mdash; became too cumbersome to organize with two or more separate areas of application functionality.</p>

<p>My solution and proposed Rails design pattern is to always group common controllers into modules and to have them inherit from a dedicated group parent controller. Thus, group specific code such as callbacks that would generally reside in the <code>ApplicationController</code> can now be applied in isolation to a group in its dedicated parent controller. Even if, at the time of developing a Rails app, there are only plans for a basic web application this pattern should still be used to account for future growth.</p>

<br/>


<br/>


<h2>Implementation of Controller Groups</h2>

<p>In my example, we are creating a <code>Customers</code> controller for the customer-facing web application, the company-internal back end system and the API.</p>

<br/>


<br/>


<h3>Generate Controllers</h3>

<p>```bash
$ rails generate controller FrontEnd
$ rails generate controller FrontEnd/Customers</p>

<p>$ rails generate controller BackEnd
$ rails generate controller BackEnd/Customers</p>

<p>$ rails generate controller API
$ rails generate controller API/V1/Customers
$ rails generate controller API/V2/Customers
```</p>

<br/>


<br/>


<h3>Update Controllers</h3>

<p>After generating the controllers in the groups, we change the superclass from <code>ApplicationController</code> to <code>&lt;Group&gt;Controller</code>.</p>

<br/>


<p>```ruby</p>

<h1>app/controllers/front_end/customers_controller.rb</h1>

<p>class FrontEnd::CustomersController &lt; FrontEndController</p>

<p>  def index</p>

<pre><code>render text: "Welcome to our Website"
</code></pre>

<p>  end</p>

<p>end</p>

<h1>app/controllers/back_end/customers_controller.rb</h1>

<p>class BackEnd::CustomersController &lt; BackEndController</p>

<p>  def index</p>

<pre><code>render text: "Admin Panel"
</code></pre>

<p>  end</p>

<p>end</p>

<h1>app/controllers/api/v1/customers_controller.rb</h1>

<p>class Api::V1::CustomersController &lt; ApiController</p>

<p>  def index</p>

<pre><code>render json: { customers: [] }
</code></pre>

<p>  end</p>

<p>end</p>

<h1>app/controllers/api/v2/customers_controller.rb</h1>

<p>class Api::V2::CustomersController &lt; ApiController</p>

<p>  def index</p>

<pre><code>render json: { customers: [], total_count: 0, request_time: Time.now }
</code></pre>

<p>  end
end
```</p>

<br/>


<p>Since all API controllers inherit from <code>ApiController</code>, we can easily disable CSRF for API calls to make non-GET valid requests without affecting the behavior in the front and back end controllers. This is a great example to demonstrate the advantage of separate controller groups.</p>

<br/>


<p>```ruby</p>

<h1>app/controllers/api_controller.api</h1>

<p>class ApiController &lt; ApplicationController
  protect_from_forgery with: :null_session
end
```</p>

<br/>


<br/>


<h3>Building Routes</h3>

<p>Now that we have the controllers separated, we want to separate the 3 different controller groups in individual subdomains thus reflecting a logical separation in the domain name. One bonus with this approach is that cookies won&rsquo;t be shared between our front and back end.</p>

<p>The <code>constraints</code> option is used to tie controller groups to subdomains, and the <code>scope</code> specifies the <code>Module</code> that denotes a controller group without exposing it in the route path.</p>

<br/>


<p>```ruby</p>

<h1>config/routes.rb</h1>

<p>require &lsquo;api_constraints&rsquo;</p>

<p>MyApp::Application.routes.draw do</p>

<p>  constraints subdomain: &ldquo;www&rdquo; do</p>

<pre><code>scope module: :front_end do
  resources :customers
end
</code></pre>

<p>  end</p>

<p>  constraints subdomain: &ldquo;admin&rdquo; do</p>

<pre><code>scope module: :back_end do
  resources :customers
end
</code></pre>

<p>  end</p>

<p>  constraints subdomain: &ldquo;api&rdquo; do</p>

<pre><code>scope module: :api do
  scope module: :v1, constraints: ApiConstraints.new(version: 1) do
    resources :customers, controller: "customers"
  end
  scope module: :v2, constraints: ApiConstraints.new(version: 2, default: :true) do
    resources :customers, controller: "customers"
  end
end
</code></pre>

<p>  end
```</p>

<br/>


<br/>


<h3>API Versioning</h3>

<p>At this point, we also want to future-proof the API and allow for supplemental versions. <a href="http://railscasts.com/episodes/350-rest-api-versioning">Ryan Bates' REST API Versioning Rail Cast #350</a> provides a perfect solution. We will integrate it by creating a customized contraint for the API version route <code>scope</code>.</p>

<br/>


<p>```ruby</p>

<h1>lib/api_constraints</h1>

<p>class ApiConstraints
  def initialize(options)</p>

<pre><code>@version = options[:version]
@default = options[:default]
</code></pre>

<p>  end</p>

<p>  def matches?(req)</p>

<pre><code>@default || req.headers['Accept'].include?("application/vnd.myapp.v#{@version}")
</code></pre>

<p>  end
end
```</p>

<br/>


<br/>


<h2>Final Words</h2>

<p>At this time, there is no functionality in the Rails generator to set the inheritence for a controller. I&rsquo;m currently looking into building a gem to add such a feature to facilitate the use of the proposed Rails design pattern.</p>

<p><a href="https://github.com/manu3569/mega-rails">The example application code used in this blog post is on Github</a>, so feel free to fork it, and please share your thoughts on the proposed Rails pattern.</p>
]]></content>
  </entry>
  
</feed>
